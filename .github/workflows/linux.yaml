# Synthizer3D v1.0.1 (Finale) - ManyLinux Python Wheels Build Workflow
# Questo workflow compila wheel Python manylinux compatibili per Synthizer3D.
# Autore: Assistant & Team Synthizer3D
# Ultimo aggiornamento: 6 Giugno 2025

name: Build and Publish Python Wheels for ManyLinux

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.9.1)'
        required: true
        default: '0.9.1'
      upload_to_pypi:
        description: 'Upload to PyPI (true/false)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  # CORREZIONE: Usa il sistema di cache locale 'default' per vcpkg.
  # 'actions/cache' si occuper√† di salvare e ripristinare questa cache.
  VCPKG_BINARY_SOURCES: "clear;default,readwrite"
  SYNTHIZER_VERSION: ${{ github.event.inputs.version || '0.9.1' }}

jobs:
  build-manylinux:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          # x86_64 builds
          - CI_ARCH: x86_64
            VCPKG_TRIPLET: x64-linux
            MANYLINUX_VERSION: manylinux_2_28
            PYVERSION: '3.8'
          - CI_ARCH: x86_64
            VCPKG_TRIPLET: x64-linux
            MANYLINUX_VERSION: manylinux_2_28
            PYVERSION: '3.9'
          - CI_ARCH: x86_64
            VCPKG_TRIPLET: x64-linux
            MANYLINUX_VERSION: manylinux_2_28
            PYVERSION: '3.10'
          - CI_ARCH: x86_64
            VCPKG_TRIPLET: x64-linux
            MANYLINUX_VERSION: manylinux_2_28
            PYVERSION: '3.11'
          - CI_ARCH: x86_64
            VCPKG_TRIPLET: x64-linux
            MANYLINUX_VERSION: manylinux_2_28
            PYVERSION: '3.12'
          - CI_ARCH: x86_64
            VCPKG_TRIPLET: x64-linux
            MANYLINUX_VERSION: manylinux_2_28
            PYVERSION: '3.13'
          # i686 builds
          - CI_ARCH: i686
            VCPKG_TRIPLET: x86-linux
            MANYLINUX_VERSION: manylinux2014
            PYVERSION: '3.8'
          - CI_ARCH: i686
            VCPKG_TRIPLET: x86-linux
            MANYLINUX_VERSION: manylinux2014
            PYVERSION: '3.9'
          - CI_ARCH: i686
            VCPKG_TRIPLET: x86-linux
            MANYLINUX_VERSION: manylinux2014
            PYVERSION: '3.10'
          - CI_ARCH: i686
            VCPKG_TRIPLET: x86-linux
            MANYLINUX_VERSION: manylinux2014
            PYVERSION: '3.11'
          - CI_ARCH: i686
            VCPKG_TRIPLET: x86-linux
            MANYLINUX_VERSION: manylinux2014
            PYVERSION: '3.12'
          - CI_ARCH: i686
            VCPKG_TRIPLET: x86-linux
            MANYLINUX_VERSION: manylinux2014
            PYVERSION: '3.13'

    name: "Build ManyLinux (${{ matrix.CI_ARCH }}, ${{ matrix.MANYLINUX_VERSION }}) Python ${{ matrix.PYVERSION }}"

    container:
      image: quay.io/pypa/${{ matrix.MANYLINUX_VERSION }}_${{ matrix.CI_ARCH }}
      options: --user root

    env:
      CI_ARCH: ${{ matrix.CI_ARCH }}
      MANYLINUX_VERSION: ${{ matrix.MANYLINUX_VERSION }}
      PYVERSION: ${{ matrix.PYVERSION }}
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.VCPKG_TRIPLET }}
      EFFECTIVE_VCPKG_INSTALLED_DIR_BASE: ${{ github.workspace }}/vcpkg_installed

    steps:
      # 1. Checkout del codice (con logica separata per 32-bit e 64-bit)
      - name: Checkout source code (for 64-bit jobs)
        if: matrix.CI_ARCH == 'x86_64'
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Checkout source code with git (for 32-bit jobs)
        if: matrix.CI_ARCH == 'i686'
        run: |
          git config --global --add safe.directory "*"
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}
          git submodule update --init --recursive
      
      # 2. Impostazione del percorso di Python specifico per la build
      - name: Set environment variables for Python path
        run: |
          echo "üêç Setting up Python ${{ matrix.PYVERSION }} environment..."
          if [ "${{ matrix.PYVERSION }}" = "3.8" ]; then echo "PYTHON_PATH=/opt/python/cp38-cp38" >> $GITHUB_ENV
          elif [ "${{ matrix.PYVERSION }}" = "3.9" ]; then echo "PYTHON_PATH=/opt/python/cp39-cp39" >> $GITHUB_ENV
          elif [ "${{ matrix.PYVERSION }}" = "3.10" ]; then echo "PYTHON_PATH=/opt/python/cp310-cp310" >> $GITHUB_ENV
          elif [ "${{ matrix.PYVERSION }}" = "3.11" ]; then echo "PYTHON_PATH=/opt/python/cp311-cp311" >> $GITHUB_ENV
          elif [ "${{ matrix.PYVERSION }}" = "3.12" ]; then echo "PYTHON_PATH=/opt/python/cp312-cp312" >> $GITHUB_ENV
          elif [ "${{ matrix.PYVERSION }}" = "3.13" ]; then echo "PYTHON_PATH=/opt/python/cp313-cp313" >> $GITHUB_ENV
          fi

      # 3. Installazione delle dipendenze di sistema e di build Python
      - name: Install system and Python build dependencies
        timeout-minutes: 10
        run: |
          echo "üì¶ Installing system dependencies..."
          if command -v dnf >/dev/null 2>&1; then
            dnf install -y curl zip unzip tar cmake make gcc-c++
          elif command -v yum >/dev/null 2>&1; then
            yum install -y curl zip unzip tar cmake make gcc-c++
          fi
          
          echo "üì¶ Installing Python build tools (including ninja)..."
          $PYTHON_PATH/bin/python -m pip install --upgrade pip
          $PYTHON_PATH/bin/pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython build auditwheel twine

      # 4. Impostazione e ripristino della cache di vcpkg
      - name: Set vcpkg Cache Path
        run: echo "VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}/vcpkg_cache" >> $GITHUB_ENV

      - name: Cache vcpkg binary cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-cache-${{ matrix.VCPKG_TRIPLET }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-cache-${{ matrix.VCPKG_TRIPLET }}-

      # 5. Setup di vcpkg
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          runVcpkgInstall: false
      
      # 6. Installazione delle librerie audio C++ con vcpkg
      - name: Install vcpkg audio dependencies (Opus, Vorbis, FAAD2)
        timeout-minutes: 25
        run: |
          echo "üéµ Installing audio libraries via vcpkg..."
          cd synthizer-c
          "$VCPKG_ROOT/vcpkg" install --triplet=$VCPKG_DEFAULT_TRIPLET --feature-flags=versions
          echo "Setting CMAKE_PREFIX_PATH and library paths..."
          TARGET_CMAKE_PREFIX_PATH="${{ env.EFFECTIVE_VCPKG_INSTALLED_DIR_BASE }}/$VCPKG_DEFAULT_TRIPLET"
          echo "CMAKE_PREFIX_PATH=$TARGET_CMAKE_PREFIX_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$TARGET_CMAKE_PREFIX_PATH/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$TARGET_CMAKE_PREFIX_PATH/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      # 7. Impostazione della versione del pacchetto
      - name: Set version in setup.py and pyproject.toml
        run: |
          echo "üè∑Ô∏è Setting version to: ${{ env.SYNTHIZER_VERSION }}"
          if [ -f "setup.py" ]; then
            sed -i "s/version=['\"][^'\"]*['\"]/version='${{ env.SYNTHIZER_VERSION }}'/g" setup.py
          fi
          if [ -f "pyproject.toml" ]; then
            sed -i "s/version = ['\"][^'\"]*['\"]/version = \"${{ env.SYNTHIZER_VERSION }}\"/g" pyproject.toml
          fi

      # 8. Esecuzione dello script di vendoring
      - name: Run C/C++ code vendoring script
        timeout-minutes: 5
        run: |
          $PYTHON_PATH/bin/python synthizer-c/vendor.py synthizer-vendored

      # 9. Applicazione di patch al codice C++ se necessario
      - name: Fix C++ compilation issues for modern compilers
        run: |
          echo "üîß Fixing C++ compilation issues..."
          if [ -f "synthizer-vendored/include/synthizer/property_automation_timeline.hpp" ]; then
            sed -i 's/PropertyAutomationPoint<N>(const PropertyAutomationPoint<N> &) = default;/PropertyAutomationPoint(const PropertyAutomationPoint<N> \&) = default;/g' \
              synthizer-vendored/include/synthizer/property_automation_timeline.hpp
          fi
          if [ -f "synthizer-vendored/include/synthizer/decoders/mp3.hpp" ]; then
            sed -i 's/local_seek_cb_for_init = (drmp3_seek_proc)seek_cb;/local_seek_cb_for_init = reinterpret_cast<drmp3_seek_proc>(seek_cb);/g' \
              synthizer-vendored/include/synthizer/decoders/mp3.hpp
          fi
          find synthizer-vendored -name "CMakeLists.txt" -exec sed -i 's/-Werror//g' {} \;
          find synthizer-vendored -name "*.cmake" -exec sed -i 's/-Werror//g' {} \;

      # 10. Compilazione dei wheel Python
      - name: Build Python Wheels (ManyLinux ${{ matrix.CI_ARCH }})
        timeout-minutes: 20
        env:
          CXXFLAGS: "-Wno-template-id-cdtor -Wno-cast-function-type -Wno-error"
          CFLAGS: "-Wno-error"
        run: |
          $PYTHON_PATH/bin/python -m build --wheel --no-isolation

      # 11. Riparazione dei wheel per la compatibilit√† ManyLinux
      - name: Repair wheels with auditwheel
        timeout-minutes: 10
        run: |
          echo "üõ†Ô∏è Repairing wheels with auditwheel..."
          for wheel in dist/*.whl; do
            if [ -f "$wheel" ]; then
              $PYTHON_PATH/bin/auditwheel repair \
                "$wheel" \
                --plat "${{ matrix.MANYLINUX_VERSION }}_${{ matrix.CI_ARCH }}" \
                --wheel-dir wheelhouse
            fi
          done
          # Copia le wheel riparate nella cartella dist per lo step di upload
          if ls wheelhouse/*.whl 1> /dev/null 2>&1; then
            cp wheelhouse/*.whl dist/
          fi
          echo "‚úÖ Repaired wheels:"
          ls -la dist/*.whl

      # 12. Caricamento degli artifact
      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-${{ matrix.MANYLINUX_VERSION }}-${{ matrix.CI_ARCH }}-py${{ matrix.PYVERSION }}
          path: dist/*.whl

  # Job per la pubblicazione su PyPI
  publish-to-pypi:
    needs: build-manylinux
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.upload_to_pypi == 'true')
    
    environment:
      name: pypi
      url: https://pypi.org/p/synthizer3d
    permissions:
      id-token: write
      
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: python-wheels-*
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  # Job per il riepilogo finale
  build-summary:
    needs: build-manylinux
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "# üéµ Synthizer3D v${{ env.SYNTHIZER_VERSION }} Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-manylinux.result }}" = "success" ]; then
            echo "‚úÖ **Build Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Build Status**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi