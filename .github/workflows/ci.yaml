# Workflow for Synthizer3d
# by Ambro86
#Ver. 0.9.0
# Trigger del workflow: si attiva ad ogni push e pull request
on:
  workflow_dispatch: # Permette l'avvio manuale dalla tab Azioni di GitHub
jobs:
  # Job per costruire le wheel su Windows
  windows-build:
    name: Build Windows (${{ matrix.CI_ARCH }}) Python ${{ matrix.PYVERSION }}
    runs-on: windows-latest
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      CI_ARCH_LOWER: ${{ (matrix.CI_ARCH == 'x86' && 'x86' || 'x64') }}
      CI_WINDOWS: "1"
      CI_ARCH_ENV: ${{ matrix.CI_ARCH }}
      VCPKG_DEFAULT_TRIPLET: ${{ (matrix.CI_ARCH == 'x86' && 'x86-windows' || 'x64-windows') }}
      # Questo è il percorso dove vcpkg in modalità manifest (con vcpkg.json) installa di default.
      EFFECTIVE_VCPKG_INSTALLED_DIR_BASE: ${{ github.workspace }}\vcpkg_installed
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        CI_ARCH: ["x64", "x86"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }} (${{ env.CI_ARCH_LOWER }})
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          architecture: ${{ env.CI_ARCH_LOWER }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored
        # Assicurati che questo script, se modifica/popola vcpkg_installed, sia coerente
        # con la modalità manifest di vcpkg o che non crei conflitti.

      - name: Cache Pip (Windows ${{ matrix.CI_ARCH }})
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ matrix.CI_ARCH }}-${{ hashFiles('**/requirements.txt', '**/setup.py', 'vcpkg.json', 'synthizer-c/vendor.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ matrix.CI_ARCH }}-

      - name: Setup MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ env.CI_ARCH_LOWER }}

      - name: Setup vcpkg (standard instance)
        uses: lukka/run-vcpkg@v11
        # Questo configura $env:VCPKG_ROOT (es. $GITHUB_WORKSPACE/vcpkg)

      - name: Install dependencies and set CMAKE_PREFIX_PATH (Windows)
        shell: pwsh
        run: |
          Write-Host "VCPKG_ROOT (tool directory from lukka/run-vcpkg) is $env:VCPKG_ROOT"
          Write-Host "VCPKG_DEFAULT_TRIPLET is $env:VCPKG_DEFAULT_TRIPLET"
          Write-Host "GITHUB_WORKSPACE is $env:GITHUB_WORKSPACE"
          Write-Host "Initial EFFECTIVE_VCPKG_INSTALLED_DIR_BASE (from job env, target for manifest install) is $env:EFFECTIVE_VCPKG_INSTALLED_DIR_BASE"
          
          if (-not $env:VCPKG_ROOT) {
            Write-Error "VCPKG_ROOT not set. This should be set by the lukka/run-vcpkg action."
            exit 1
          }

          # Esegui vcpkg install. Se vcpkg.json è in $env:GITHUB_WORKSPACE (CWD),
          # installerà in $env:GITHUB_WORKSPACE/vcpkg_installed/$env:VCPKG_DEFAULT_TRIPLET
          # che corrisponde a $env:EFFECTIVE_VCPKG_INSTALLED_DIR_BASE/$env:VCPKG_DEFAULT_TRIPLET
          # La CurrentWorkingDirectory per gli script eseguiti da 'run:' è $GITHUB_WORKSPACE.
          & "$env:VCPKG_ROOT\vcpkg.exe" install --triplet $env:VCPKG_DEFAULT_TRIPLET
          Write-Host "Finished vcpkg install command."
          
          # CMAKE_PREFIX_PATH deve puntare a dove vcpkg ha effettivamente installato i pacchetti.
          # Con la modalità manifest, questo è $env:EFFECTIVE_VCPKG_INSTALLED_DIR_BASE/$env:VCPKG_DEFAULT_TRIPLET.
          $cmakePrefixPathValue = Join-Path $env:EFFECTIVE_VCPKG_INSTALLED_DIR_BASE $env:VCPKG_DEFAULT_TRIPLET
          
          Write-Host "Verifying existence of target CMAKE_PREFIX_PATH: $cmakePrefixPathValue"
          if (-not (Test-Path $cmakePrefixPathValue -PathType Container)) {
            Write-Warning "ATTENZIONE: La directory $cmakePrefixPathValue (target per CMAKE_PREFIX_PATH) NON esiste dopo vcpkg install."
            Write-Warning "Questo indica che vcpkg non ha installato nella posizione manifest attesa."
            Write-Warning "Contenuto di $env:EFFECTIVE_VCPKG_INSTALLED_DIR_BASE per debug:"
            Get-ChildItem -Path $env:EFFECTIVE_VCPKG_INSTALLED_DIR_BASE -ErrorAction SilentlyContinue -Depth 1 || Write-Warning "$env:EFFECTIVE_VCPKG_INSTALLED_DIR_BASE non esiste o è vuoto."
            
            # Fallback per debug: controlla la directory di installazione classica di vcpkg
            $classicVcpkgInstalledPath = Join-Path (Join-Path $env:VCPKG_ROOT "installed") $env:VCPKG_DEFAULT_TRIPLET
            Write-Warning "Controllo del percorso di installazione classico di vcpkg per debug: $classicVcpkgInstalledPath"
            if(Test-Path $classicVcpkgInstalledPath -PathType Container){
                Write-Warning "Il percorso classico $classicVcpkgInstalledPath ESISTE. Questo è fonte di confusione se era prevista la modalità manifest."
            } else {
                Write-Warning "Anche il percorso classico $classicVcpkgInstalledPath NON esiste."
            }
          } else {
            Write-Host "Confermato: La directory target per CMAKE_PREFIX_PATH esiste: $cmakePrefixPathValue"
          }

          echo "CMAKE_PREFIX_PATH=$cmakePrefixPathValue" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "CMAKE_PREFIX_PATH impostato a $cmakePrefixPathValue"
          # EFFECTIVE_VCPKG_INSTALLED_DIR_BASE è già corretto dall'env del job, non serve aggiornarlo di nuovo in GITHUB_ENV
          # se la nostra assunzione sulla modalità manifest è corretta.

      - name: Install Python build dependencies (Windows)
        run: |
          python -m pip install --upgrade pip
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython build delvewheel

      - name: Build Python Wheels (Windows ${{ matrix.CI_ARCH }})
        shell: powershell
        env:
          # CMAKE_PREFIX_PATH è impostato tramite GITHUB_ENV.
          # SYNTHIZER_EXPECTED_VCPKG_PATH_FOR_DEBUG userà il valore di EFFECTIVE_VCPKG_INSTALLED_DIR_BASE dall'env del job.
          SYNTHIZER_EXPECTED_VCPKG_PATH_FOR_DEBUG: ${{ env.EFFECTIVE_VCPKG_INSTALLED_DIR_BASE }}\${{ env.VCPKG_DEFAULT_TRIPLET }}
        run: |
          Set-Location $Env:GITHUB_WORKSPACE
          Write-Host "Arch: ${{ env.CI_ARCH_LOWER }}"
          Write-Host "Current CMAKE_PREFIX_PATH for build is: $env:CMAKE_PREFIX_PATH"
          Write-Host "EFFECTIVE_VCPKG_INSTALLED_DIR_BASE for build is: $env:EFFECTIVE_VCPKG_INSTALLED_DIR_BASE"
          Write-Host "Synthizer expects vcpkg path (for debug/verification): $env:SYNTHIZER_EXPECTED_VCPKG_PATH_FOR_DEBUG"
          python -m build --wheel --no-isolation

      - name: List vcpkg installed files for debugging
        shell: powershell
        run: |
          $vcpkgInstalledTripletDir = Join-Path $env:EFFECTIVE_VCPKG_INSTALLED_DIR_BASE $env:VCPKG_DEFAULT_TRIPLET
          Write-Host "Listing contents of effective vcpkg directory: $vcpkgInstalledTripletDir ..."
          if (Test-Path $vcpkgInstalledTripletDir -PathType Container) {
            Get-ChildItem -Path $vcpkgInstalledTripletDir -Recurse -Depth 2 | Select-Object FullName, Length, Mode | Format-Table -AutoSize -Wrap
          } else {
            Write-Warning "$vcpkgInstalledTripletDir does not exist."
          }

          $vcpkgInstalledBinDir = Join-Path $vcpkgInstalledTripletDir "bin"
          if (Test-Path $vcpkgInstalledBinDir -PathType Container) {
            Write-Host "Listing contents of $vcpkgInstalledBinDir ..."
            Get-ChildItem -Path $vcpkgInstalledBinDir -Recurse | Select-Object FullName, Length, Mode | Format-Table -AutoSize -Wrap
          } else {
            Write-Warning "$vcpkgInstalledBinDir does not exist or is not a directory."
          }

          $vcpkgInstalledLibDir = Join-Path $vcpkgInstalledTripletDir "lib"
          if (Test-Path $vcpkgInstalledLibDir -PathType Container) {
            Write-Host "Listing contents of $vcpkgInstalledLibDir ..."
            Get-ChildItem -Path $vcpkgInstalledLibDir -Recurse | Select-Object FullName, Length, Mode | Format-Table -AutoSize -Wrap
          } else {
            Write-Warning "$vcpkgInstalledLibDir does not exist or is not a directory."
          }
        continue-on-error: true

      - name: Repair Wheel with Delvewheel (Windows ${{ matrix.CI_ARCH }})
        shell: powershell
        run: |
          $vcpkgInstalledTripletDir = Join-Path $env:EFFECTIVE_VCPKG_INSTALLED_DIR_BASE $env:VCPKG_DEFAULT_TRIPLET
          $vcpkgInstalledBinDir = Join-Path $vcpkgInstalledTripletDir "bin"
          $vcpkgInstalledLibDir = Join-Path $vcpkgInstalledTripletDir "lib"
          
          Write-Host "Path vcpkg (bin) che sarà aggiunto a delvewheel: $vcpkgInstalledBinDir"
          Write-Host "Path vcpkg (lib) che sarà aggiunto a delvewheel: $vcpkgInstalledLibDir"

          foreach ($wheel in (Get-ChildItem -Path dist/*.whl)) {
            Write-Host "Repairing wheel: $($wheel.FullName)"
            # Aggiungi i percorsi delle DLL di vcpkg a delvewheel.
            # Delvewheel cercherà le dipendenze in queste directory.
            # Potrebbe essere necessario solo -add-path per la directory bin, o entrambe.
            # Il flag -w sovrascrive la wheel originale con quella riparata nella stessa directory (dist/)
            delvewheel repair --add-path "$vcpkgInstalledBinDir;$vcpkgInstalledLibDir" -w "$($wheel.DirectoryName)" "$($wheel.FullName)"
          }
          Write-Host "Listing repaired wheels in dist/:"
          Get-ChildItem -Path dist/*.whl | ForEach-Object { Write-Host $_.Name }

      - name: Upload Python Wheel Artifact (Windows ${{ matrix.CI_ARCH }})
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-win-${{ matrix.CI_ARCH }}-${{ matrix.PYVERSION }}
          path: dist/*.whl
  # Job per costruire le wheel su Linux x86_64
  linux-x64-build:
    name: Build Linux (x86_64) Python ${{ matrix.PYVERSION }}
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
      options: --user root

    env:
      CI_ARCH: x86_64
      MANYLINUX_VERSION: manylinux_2_28
      PYVERSION: ${{ matrix.PYVERSION }}
      VCPKG_DEFAULT_TRIPLET: x64-linux
      EFFECTIVE_VCPKG_INSTALLED_DIR_BASE: ${{ github.workspace }}/vcpkg_installed

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      - name: Set environment variables for Python path
        run: |
          echo "🐍 Setting up Python ${{ matrix.PYVERSION }} environment..."
          if [ "${{ matrix.PYVERSION }}" = "3.8" ]; then echo "PYTHON_PATH=/opt/python/cp38-cp38" >> $GITHUB_ENV
          elif [ "${{ matrix.PYVERSION }}" = "3.9" ]; then echo "PYTHON_PATH=/opt/python/cp39-cp39" >> $GITHUB_ENV
          elif [ "${{ matrix.PYVERSION }}" = "3.10" ]; then echo "PYTHON_PATH=/opt/python/cp310-cp310" >> $GITHUB_ENV
          elif [ "${{ matrix.PYVERSION }}" = "3.11" ]; then echo "PYTHON_PATH=/opt/python/cp311-cp311" >> $GITHUB_ENV
          elif [ "${{ matrix.PYVERSION }}" = "3.12" ]; then echo "PYTHON_PATH=/opt/python/cp312-cp312" >> $GITHUB_ENV
          elif [ "${{ matrix.PYVERSION }}" = "3.13" ]; then echo "PYTHON_PATH=/opt/python/cp313-cp313" >> $GITHUB_ENV
          fi

      - name: Install system and Python build dependencies
        timeout-minutes: 30
        run: |
          echo "📦 Installing system dependencies..."
          if command -v dnf >/dev/null 2>&1; then
            dnf install -y curl zip unzip tar cmake make gcc-c++ openssl-devel
          elif command -v yum >/dev/null 2>&1; then
            yum install -y curl zip unzip tar cmake make gcc-c++ openssl-devel
          fi
          
          echo "📦 Installing Python build tools (including ninja)..."
          $PYTHON_PATH/bin/python -m pip install --upgrade pip
          $PYTHON_PATH/bin/pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython build auditwheel twine

      - name: Set vcpkg Cache Path
        run: echo "VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}/vcpkg_cache" >> $GITHUB_ENV

      - name: Cache vcpkg binary cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-cache-${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-cache-${{ env.VCPKG_DEFAULT_TRIPLET }}-

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          runVcpkgInstall: false
      
      - name: Install vcpkg audio dependencies (Opus, Vorbis, FAAD2)
        timeout-minutes: 25
        run: |
          echo "🎵 Installing audio libraries via vcpkg..."
          cd synthizer-c
          "$VCPKG_ROOT/vcpkg" install --triplet=$VCPKG_DEFAULT_TRIPLET --feature-flags=versions
          echo "Setting CMAKE_PREFIX_PATH and library paths..."
          TARGET_CMAKE_PREFIX_PATH="${{ env.EFFECTIVE_VCPKG_INSTALLED_DIR_BASE }}/$VCPKG_DEFAULT_TRIPLET"
          echo "CMAKE_PREFIX_PATH=$TARGET_CMAKE_PREFIX_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$TARGET_CMAKE_PREFIX_PATH/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$TARGET_CMAKE_PREFIX_PATH/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Run C/C++ code vendoring script
        timeout-minutes: 5
        run: |
          $PYTHON_PATH/bin/python synthizer-c/vendor.py synthizer-vendored

      - name: Fix C++ compilation issues for modern compilers
        run: |
          echo "🔧 Fixing C++ compilation issues..."
          if [ -f "synthizer-vendored/include/synthizer/property_automation_timeline.hpp" ]; then
            sed -i 's/PropertyAutomationPoint<N>(const PropertyAutomationPoint<N> &) = default;/PropertyAutomationPoint(const PropertyAutomationPoint<N> \&) = default;/g' \
              synthizer-vendored/include/synthizer/property_automation_timeline.hpp
          fi
          if [ -f "synthizer-vendored/include/synthizer/decoders/mp3.hpp" ]; then
            sed -i 's/local_seek_cb_for_init = (drmp3_seek_proc)seek_cb;/local_seek_cb_for_init = reinterpret_cast<drmp3_seek_proc>(seek_cb);/g' \
              synthizer-vendored/include/synthizer/decoders/mp3.hpp
          fi
          find synthizer-vendored -name "CMakeLists.txt" -exec sed -i 's/-Werror//g' {} \;
          find synthizer-vendored -name "*.cmake" -exec sed -i 's/-Werror//g' {} \;

      - name: Build Python Wheels (Linux x86_64)
        timeout-minutes: 45
        env:
          RUSTFLAGS: "-A warnings"
          CXXFLAGS: "-Wno-template-id-cdtor -Wno-cast-function-type -Wno-error"
          CFLAGS: "-Wno-error"
        run: |
          $PYTHON_PATH/bin/python -m build --wheel --no-isolation

      - name: Repair wheels with auditwheel
        timeout-minutes: 10
        run: |
          echo "🛠️ Repairing wheels with auditwheel..."
          for wheel in dist/*.whl; do
            if [ -f "$wheel" ]; then
              $PYTHON_PATH/bin/auditwheel repair \
                "$wheel" \
                --plat "${{ env.MANYLINUX_VERSION }}_${{ env.CI_ARCH }}" \
                --wheel-dir wheelhouse
            fi
          done
          if ls wheelhouse/*.whl 1> /dev/null 2>&1; then
            cp wheelhouse/*.whl dist/
          fi
          echo "✅ Repaired wheels:"
          ls -la dist/*.whl

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-linux-x86_64-${{ matrix.PYVERSION }}
          path: dist/*.whl

  # Job per costruire le wheel su macOS (x64 - Intel Runner)
  macos-x64-build:
    name: Build macOS (x64) Python ${{ matrix.PYVERSION }}
    runs-on: macos-13 # Intel runner, o macos-latest se vuoi che scelga per x64
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      TARGET_ARCH: "x64"
      VCPKG_DEFAULT_TRIPLET: "x64-osx"
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }} (x64)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          architecture: 'x64' # Assicura Python x64

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (macOS x64)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-${{ env.TARGET_ARCH }}-pip-${{ env.PYVERSION }}-${{ hashFiles('**/requirements.txt', '**/setup.py', 'vcpkg.json', 'synthizer-c/vendor.py') }} # Aggiunto vendor.py per coerenza
          restore-keys: |
            ${{ runner.os }}-${{ env.TARGET_ARCH }}-pip-${{ env.PYVERSION }}-

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        # 'vcpkgTriplet' rimosso perché è un input inatteso per v11 e VCPKG_DEFAULT_TRIPLET è già nell'env.

      - name: Install dependencies using vcpkg (macOS x64)
        run: |
          echo "VCPKG_ROOT (vcpkg tool directory) is $VCPKG_ROOT"
          echo "VCPKG_DEFAULT_TRIPLET is $VCPKG_DEFAULT_TRIPLET"
          echo "GITHUB_WORKSPACE is $GITHUB_WORKSPACE"

          if [ -z "$VCPKG_ROOT" ]; then
            echo "Error: VCPKG_ROOT is not set."
            exit 1
          fi

          # Se vcpkg.json esiste in $GITHUB_WORKSPACE (CWD), vcpkg installerà in $GITHUB_WORKSPACE/vcpkg_installed/$VCPKG_DEFAULT_TRIPLET
          "$VCPKG_ROOT/vcpkg" install --triplet "$VCPKG_DEFAULT_TRIPLET"
          echo "Finished vcpkg install command."

          # Percorso di installazione atteso per la modalità manifest di vcpkg
          VCPKG_MANIFEST_INSTALL_PATH="$GITHUB_WORKSPACE/vcpkg_installed/$VCPKG_DEFAULT_TRIPLET"
          
          echo "Target CMAKE_PREFIX_PATH will be: $VCPKG_MANIFEST_INSTALL_PATH"
          if [ ! -d "$VCPKG_MANIFEST_INSTALL_PATH" ]; then
            echo "WARNING: Directory $VCPKG_MANIFEST_INSTALL_PATH does NOT exist after vcpkg install."
            echo "This suggests vcpkg did not install to the expected manifest location."
            echo "Listing contents of $GITHUB_WORKSPACE/vcpkg_installed for debugging:"
            ls -la "$GITHUB_WORKSPACE/vcpkg_installed" || echo "$GITHUB_WORKSPACE/vcpkg_installed does not exist or is empty."
            # Verifica anche il percorso classico per completezza di debug
            CLASSIC_INSTALL_PATH="$VCPKG_ROOT/installed/$VCPKG_DEFAULT_TRIPLET"
            echo "Checking classic mode install path for debugging: $CLASSIC_INSTALL_PATH"
            if [ -d "$CLASSIC_INSTALL_PATH" ]; then
                 echo "WARNING: Classic mode path $CLASSIC_INSTALL_PATH EXISTS. This is unexpected if manifest mode is active."
            else
                 echo "Classic mode path $CLASSIC_INSTALL_PATH also does NOT exist."
            fi
          else
            echo "Confirmed: Target directory for CMAKE_PREFIX_PATH exists: $VCPKG_MANIFEST_INSTALL_PATH"
          fi

          echo "CMAKE_PREFIX_PATH=$VCPKG_MANIFEST_INSTALL_PATH" >> "$GITHUB_ENV"
          echo "DYLD_LIBRARY_PATH=$VCPKG_MANIFEST_INSTALL_PATH/lib${DYLD_LIBRARY_PATH:+:$DYLD_LIBRARY_PATH}" >> "$GITHUB_ENV"
          echo "CMAKE_PREFIX_PATH set to $VCPKG_MANIFEST_INSTALL_PATH"
          echo "DYLD_LIBRARY_PATH extended with $VCPKG_MANIFEST_INSTALL_PATH/lib"

      - name: Install Python build dependencies (macOS)
        run: |
          python -m pip install --upgrade pip
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython build delocate

      - name: Build Python Wheels (macOS x64)
        run: |
          echo "Building with CMAKE_PREFIX_PATH = $CMAKE_PREFIX_PATH"
          echo "Current DYLD_LIBRARY_PATH for build = $DYLD_LIBRARY_PATH"
          python -m build --wheel --no-isolation

      - name: Repair Wheel with Delocate (macOS x64)
        run: |
          for wheel in dist/*.whl; do
            delocate-wheel -w dist/ "$wheel" 
          done
          ls -l dist/ # Aggiunto per mostrare le wheel riparate

      - name: Upload Python Wheel Artifact (macOS x64)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-macos-x64-${{ matrix.PYVERSION }}
          path: dist/*.whl
          if-no-files-found: error # Aggiunto per fallire se non ci sono wheel

  # Job per costruire le wheel su macOS (ARM64 - ARM Runner)
  macos-arm64-build:
    name: Build macOS (arm64) Python ${{ matrix.PYVERSION }}
    runs-on: macos-latest # Dovrebbe selezionare un runner ARM (es. macos-14)
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      TARGET_ARCH: "arm64"
      VCPKG_DEFAULT_TRIPLET: "arm64-osx"
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }} (arm64)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          architecture: 'arm64' # Assicura Python arm64

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (macOS arm64)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-${{ env.TARGET_ARCH }}-pip-${{ env.PYVERSION }}-${{ hashFiles('**/requirements.txt', '**/setup.py', 'vcpkg.json', 'synthizer-c/vendor.py') }} # Aggiunto vendor.py per coerenza
          restore-keys: |
            ${{ runner.os }}-${{ env.TARGET_ARCH }}-pip-${{ env.PYVERSION }}-

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        # 'vcpkgTriplet' rimosso perché è un input inatteso per v11 e VCPKG_DEFAULT_TRIPLET è già nell'env.

      - name: Install dependencies using vcpkg (macOS arm64)
        run: |
          echo "VCPKG_ROOT (vcpkg tool directory) is $VCPKG_ROOT"
          echo "VCPKG_DEFAULT_TRIPLET is $VCPKG_DEFAULT_TRIPLET"
          echo "GITHUB_WORKSPACE is $GITHUB_WORKSPACE"

          if [ -z "$VCPKG_ROOT" ]; then
            echo "Error: VCPKG_ROOT is not set."
            exit 1
          fi

          # Se vcpkg.json esiste in $GITHUB_WORKSPACE (CWD), vcpkg installerà in $GITHUB_WORKSPACE/vcpkg_installed/$VCPKG_DEFAULT_TRIPLET
          "$VCPKG_ROOT/vcpkg" install --triplet "$VCPKG_DEFAULT_TRIPLET"
          echo "Finished vcpkg install command."

          # Percorso di installazione atteso per la modalità manifest di vcpkg
          VCPKG_MANIFEST_INSTALL_PATH="$GITHUB_WORKSPACE/vcpkg_installed/$VCPKG_DEFAULT_TRIPLET"
          
          echo "Target CMAKE_PREFIX_PATH will be: $VCPKG_MANIFEST_INSTALL_PATH"
          if [ ! -d "$VCPKG_MANIFEST_INSTALL_PATH" ]; then
            echo "WARNING: Directory $VCPKG_MANIFEST_INSTALL_PATH does NOT exist after vcpkg install."
            echo "This suggests vcpkg did not install to the expected manifest location."
            echo "Listing contents of $GITHUB_WORKSPACE/vcpkg_installed for debugging:"
            ls -la "$GITHUB_WORKSPACE/vcpkg_installed" || echo "$GITHUB_WORKSPACE/vcpkg_installed does not exist or is empty."
            CLASSIC_INSTALL_PATH="$VCPKG_ROOT/installed/$VCPKG_DEFAULT_TRIPLET"
            echo "Checking classic mode install path for debugging: $CLASSIC_INSTALL_PATH"
            if [ -d "$CLASSIC_INSTALL_PATH" ]; then
                 echo "WARNING: Classic mode path $CLASSIC_INSTALL_PATH EXISTS. This is unexpected if manifest mode is active."
            else
                 echo "Classic mode path $CLASSIC_INSTALL_PATH also does NOT exist."
            fi
          else
            echo "Confirmed: Target directory for CMAKE_PREFIX_PATH exists: $VCPKG_MANIFEST_INSTALL_PATH"
          fi
          
          echo "CMAKE_PREFIX_PATH=$VCPKG_MANIFEST_INSTALL_PATH" >> "$GITHUB_ENV"
          echo "DYLD_LIBRARY_PATH=$VCPKG_MANIFEST_INSTALL_PATH/lib${DYLD_LIBRARY_PATH:+:$DYLD_LIBRARY_PATH}" >> "$GITHUB_ENV"
          echo "CMAKE_PREFIX_PATH set to $VCPKG_MANIFEST_INSTALL_PATH"
          echo "DYLD_LIBRARY_PATH extended with $VCPKG_MANIFEST_INSTALL_PATH/lib"

      - name: Install Python build dependencies (macOS)
        run: |
          python -m pip install --upgrade pip
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython build delocate

      - name: Build Python Wheels (macOS arm64)
        run: |
          echo "Building with CMAKE_PREFIX_PATH = $CMAKE_PREFIX_PATH"
          echo "Current DYLD_LIBRARY_PATH for build = $DYLD_LIBRARY_PATH"
          python -m build --wheel --no-isolation

      - name: Repair Wheel with Delocate (macOS arm64)
        run: |
          for wheel in dist/*.whl; do
            delocate-wheel -w dist/ "$wheel"
          done
          ls -l dist/ # Aggiunto per mostrare le wheel riparate

      - name: Upload Python Wheel Artifact (macOS arm64)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-macos-arm64-${{ matrix.PYVERSION }}
          path: dist/*.whl
          if-no-files-found: error # Aggiunto per fallire se non ci sono wheel

  # Job per il deployment su PyPI
  deploy_pypi:
    name: Deploy to PyPI
    needs: [windows-build, linux-x64-build, macos-x64-build, macos-arm64-build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Required for trusted publishing
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ~/artifacts
          # pattern: python-wheels-* # Optional: if you need to be specific, otherwise downloads all
          # merge-multiple: true # If artifacts have same names from different jobs (not the case here)

      - name: Set up Python for Twine
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Upgrade pip for Twine step
        run: python -m pip install --upgrade pip

      - name: Install Twine
        run: python -m pip install --upgrade twine

      - name: Display downloaded artifacts structure
        run: ls -R ~/artifacts

      - name: Upload to PyPI
        run: |
          python -m twine upload --skip-existing ~/artifacts/*/*.whl