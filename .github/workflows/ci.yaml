# Workflow for Synthizer3d
# by Ambro86, adapted for cibuildwheel
name: Build Synthizer3d Wheels and Sdist

on:
  push: {}
  pull_request: {}

jobs:
  build_wheels:
    name: Build Wheels on ${{ matrix.os }} (${{ matrix.arch_label }})
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch_label: x64_aarch64
            cibw_archs: "x86_64 aarch64"
            vcpkg_triplet_map_x86_64: "x64-linux"
            vcpkg_triplet_map_aarch64: "aarch64-linux"
            is_linux: true
          - os: windows-latest
            arch_label: x86_amd64
            cibw_archs: "x86 AMD64" # cibuildwheel uses AMD64 for 64-bit Windows
            vcpkg_triplet_map_x86: "x86-windows"
            vcpkg_triplet_map_amd64: "x64-windows"
            is_windows: true
          - os: macos-13 # Intel runner
            arch_label: x64
            cibw_archs: "x86_64"
            vcpkg_triplet_map_x86_64: "x64-osx"
            is_macos: true
          - os: macos-14 # Apple Silicon runner
            arch_label: arm64
            cibw_archs: "arm64"
            vcpkg_triplet_map_arm64: "arm64-osx"
            is_macos: true

    steps:
      - name: Ensure /usr/bin is in PATH for macOS (for 'which' command)
        if: matrix.is_macos == true
        run: echo "/usr/bin" >> $GITHUB_PATH

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Determine vcpkg triplet for primary architecture of the job
        id: vcpkg_triplet_primary
        shell: bash
        run: |
          TRIPLET=""
          # Note: matrix.cibw_archs can contain multiple values like "x86 AMD64"
          # We need to pick one primary for vcpkg setup if it cannot handle multiple simultaneously
          # Typically, for a job targeting multiple cibw_archs, vcpkg is set up for the "main" arch of the runner
          # or one of the target archs. cibuildwheel handles arch-specifics internally later.
          if [ "${{ matrix.is_windows }}" == "true" ]; then
            if [[ "${{ matrix.cibw_archs }}" == *"AMD64"* ]]; then # Prefer AMD64 if available
              TRIPLET="${{ matrix.vcpkg_triplet_map_amd64 }}"
            elif [[ "${{ matrix.cibw_archs }}" == "x86"* ]]; then
              TRIPLET="${{ matrix.vcpkg_triplet_map_x86 }}"
            fi
          elif [ "${{ matrix.is_linux }}" == "true" ]; then
            if [[ "${{ matrix.cibw_archs }}" == *"x86_64"* ]]; then # Prefer x86_64 if available
              TRIPLET="${{ matrix.vcpkg_triplet_map_x86_64 }}"
            elif [[ "${{ matrix.cibw_archs }}" == *"aarch64"* ]]; then
              TRIPLET="${{ matrix.vcpkg_triplet_map_aarch64 }}"
            fi
          elif [ "${{ matrix.is_macos }}" == "true" ]; then
            if [[ "${{ matrix.cibw_archs }}" == "x86_64"* ]]; then
              TRIPLET="${{ matrix.vcpkg_triplet_map_x86_64 }}"
            elif [[ "${{ matrix.cibw_archs }}" == "arm64"* ]]; then
              TRIPLET="${{ matrix.vcpkg_triplet_map_arm64 }}"
            fi
          fi

          if [ -z "$TRIPLET" ]; then
            echo "Error: Could not determine PRIMARY_VCPKG_TRIPLET for os=${{ matrix.os }}, cibw_archs='${{ matrix.cibw_archs }}'"
            exit 1
          fi
          echo "PRIMARY_VCPKG_TRIPLET=$TRIPLET" >> $GITHUB_ENV
          echo "Determined PRIMARY_VCPKG_TRIPLET for job: $TRIPLET"

      - name: Set up vcpkg (bootstrap only)
        uses: lukka/run-vcpkg@v11.5
        env:
          # This VCPKG_DEFAULT_TRIPLET is primarily a hint for lukka/run-vcpkg's own setup.
          # The actual triplet for vcpkg install will use env.PRIMARY_VCPKG_TRIPLET.
          VCPKG_DEFAULT_TRIPLET: ${{ env.PRIMARY_VCPKG_TRIPLET }}
        with:
          runVcpkgInstall: false # We will run install in the next step

      - name: Install vcpkg packages using determined triplet
        shell: bash
        run: |
          echo "VCPKG_ROOT (from lukka/run-vcpkg) is $VCPKG_ROOT"
          echo "PRIMARY_VCPKG_TRIPLET (determined by us for this install) is ${{ env.PRIMARY_VCPKG_TRIPLET }}"

          if [ -z "$VCPKG_ROOT" ]; then
            echo "Error: VCPKG_ROOT is not set."
            exit 1
          fi
          if [ -z "${{ env.PRIMARY_VCPKG_TRIPLET }}" ]; then
            echo "Error: Our PRIMARY_VCPKG_TRIPLET is not set. Cannot install."
            exit 1
          fi

          echo "Attempting to install vcpkg packages with triplet: ${{ env.PRIMARY_VCPKG_TRIPLET }}"
          # This assumes vcpkg.json is in the root of your project and defines dependencies.
          # If not, you might need to list packages here, e.g., "$VCPKG_ROOT/vcpkg" install faad2 libogg --triplet ...
          "$VCPKG_ROOT/vcpkg" install --triplet "${{ env.PRIMARY_VCPKG_TRIPLET }}"

          # VCPKG_ROOT from lukka/run-vcpkg uses forward slashes, e.g., D:/a/...
          VCPKG_INSTALLED_DIR_FOR_JOB="$VCPKG_ROOT/installed/${{ env.PRIMARY_VCPKG_TRIPLET }}"
          echo "VCPKG_INSTALLED_DIR_PATH_FOR_CIBW=$VCPKG_INSTALLED_DIR_FOR_JOB" >> $GITHUB_ENV
          echo "Path for CMAKE_PREFIX_PATH (for cibuildwheel): $VCPKG_INSTALLED_DIR_FOR_JOB"

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v2.19.1
        env:
          # For CIBW_ENVIRONMENT_*, VAR=VALUE pairs are space-separated.
          # Values with spaces would need quoting like VAR="value with spaces".
          # Our paths here don't have spaces. $VCPKG_INSTALLED_DIR_PATH_FOR_CIBW will use forward slashes.
          CIBW_ENVIRONMENT_WINDOWS: >-
            CMAKE_PREFIX_PATH=${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}
            PATH=${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}/bin;${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}/tools/${{ env.PRIMARY_VCPKG_TRIPLET }};%PATH%
          CIBW_ENVIRONMENT_LINUX: >-
            CMAKE_PREFIX_PATH=${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}
            LD_LIBRARY_PATH=${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
            PATH=${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}/bin:${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}/tools/${{ env.PRIMARY_VCPKG_TRIPLET }}:$PATH
          CIBW_ENVIRONMENT_MACOS: >-
            CMAKE_PREFIX_PATH=${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}
            DYLD_LIBRARY_PATH=${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}/lib${DYLD_LIBRARY_PATH:+:$DYLD_LIBRARY_PATH}
            PATH=${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}/bin:${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}/tools/${{ env.PRIMARY_VCPKG_TRIPLET }}:$PATH

          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_archs }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_archs }}
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_archs }}

          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_BEFORE_ALL_LINUX: >-
            yum install -y patchelf openssl-devel zlib-devel &&
            rm -rf /var/cache/yum

          CIBW_BUILD_VERBOSITY: 1 # Set to 3 for maximum debug output if needed

          # For delvewheel, paths should use forward slashes if VCPKG_INSTALLED_DIR_PATH_FOR_CIBW uses them.
          # Delvewheel is generally good with forward slashes. Semicolon is the separator.
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >-
            delvewheel repair --add-path "${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}/bin;${{ env.VCPKG_INSTALLED_DIR_PATH_FOR_CIBW }}/lib" -w {dest_dir} {wheel}
          CIBW_PIP_PACKAGES_WINDOWS: delvewheel

          CIBW_PIP_PACKAGES_MACOS: delocate

      - name: Upload Python Wheel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-${{ matrix.os }}-${{ matrix.arch_label }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build Python sdist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python (for sdist)
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Install Python build dependencies (sdist)
        run: |
          python -m pip install --upgrade pip build

      - name: Build Python sdist
        run: python -m build --sdist

      - name: Upload Python sdist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-sdist
          path: dist/*.tar.gz

  deploy_pypi:
    name: Deploy to PyPI
    if: startsWith(github.ref, 'refs/tags')
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ~/artifacts

      - name: Set up Python for Twine
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Twine
        run: python -m pip install --upgrade pip twine

      - name: Display downloaded artifacts structure
        run: ls -R ~/artifacts

      - name: Upload to PyPI
        run: |
          echo "Listing all wheel and sdist files to be uploaded:"
          find ~/artifacts -name '*.whl' -print -exec echo \;
          find ~/artifacts -name '*.tar.gz' -print -exec echo \;
          python -m twine upload --skip-existing $(find ~/artifacts -name '*.whl' -o -name '*.tar.gz')