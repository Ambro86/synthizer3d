# Trigger del workflow: si attiva ad ogni push e pull request
on:
  push:
    branches:
      - main # O il tuo branch di sviluppo principale
      - 'release/**'
      - 'correction-python313-and-new-cython-version' # Aggiunto per il tuo branch di lavoro
  pull_request:
    branches:
      - main # O il tuo branch di sviluppo principale

jobs:
  # Job per costruire le wheel su Windows
  windows-build:
    name: Build Windows (x64) Python ${{ matrix.PYVERSION }}
    runs-on: windows-latest
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      CI_ARCH: "64" # Fisso a 64-bit per Windows in questo esempio
      CI_WINDOWS: "1"
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }} (x64)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          architecture: 'x64'

      - name: Cache Pip (Windows)
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ env.CI_ARCH }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ env.CI_ARCH }}-

      - name: Configure MSVC 64-bit Environment Variables
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          echo "Configured MSVC for x64"
          set PATH >> %GITHUB_ENV%
          set INCLUDE >> %GITHUB_ENV%
          set LIB >> %GITHUB_ENV%

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython
          # Se hai un requirements-build.txt che include queste dipendenze:
          # pip install -r requirements-build.txt

      - name: Build Python Wheels (Windows)
        shell: powershell
        run: |
          Set-Location $Env:GITHUB_WORKSPACE
          # Se hai uno script specifico per Windows, chiamalo qui:
          # ./ci/build_python.ps1
          # Altrimenti, usa un comando standard:
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-win-x64-${{ matrix.PYVERSION }}
          path: dist/*.whl

  # Job per costruire le wheel su Linux
  linux-build:
    name: Build Linux (x64) Python ${{ matrix.PYVERSION }}
    runs-on: ubuntu-latest
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}

      - name: Cache Pip (Linux)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYVERSION }}-

      - name: Install system build dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential # Per compilatori C/C++ e make
          # Aggiungi qui altri pacchetti di sistema necessari per la compilazione (es. cmake, ninja-build se non installati via pip)
          # sudo apt-get install -y cmake ninja-build # Esempio se preferisci versioni di sistema

      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython
          # Se hai un requirements-build.txt che include queste dipendenze:
          # pip install -r requirements-build.txt

      - name: Build Python Wheels (Linux)
        run: |
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-linux-x64-${{ matrix.PYVERSION }}
          path: dist/*.whl

  # Job per costruire le wheel su macOS
  macos-build:
    name: Build macOS (x64) Python ${{ matrix.PYVERSION }}
    runs-on: macos-latest 
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}

      - name: Cache Pip (macOS)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYVERSION }}-

      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython
          # Se hai un requirements-build.txt che include queste dipendenze:
          # pip install -r requirements-build.txt

      - name: Build Python Wheels (macOS)
        run: |
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-macos-x64-${{ matrix.PYVERSION }}
          path: dist/*.whl

  # Job per creare la sdist (source distribution)
  sdist-build:
    name: Build Python sdist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python (for sdist)
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' 

      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython
          # Se hai un requirements-build.txt che include queste dipendenze:
          # pip install -r requirements-build.txt

      - name: Build Python sdist
        run: python setup.py sdist

      - name: Upload Python sdist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-sdist
          path: dist/*.tar.gz 

  # Job per il deployment su PyPI
  deploy_pypi:
    name: Deploy to PyPI
    if: startsWith(github.ref, 'refs/tags') 
    needs: [windows-build, linux-build, macos-build, sdist-build] 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write 
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ~/artifacts 

      - name: Set up Python for Twine
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' 

      - name: Install Twine
        run: python -m pip install --upgrade twine

      - name: Display downloaded artifacts structure
        run: ls -R ~/artifacts

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }} 
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }} 
        run: |
          python -m twine upload --skip-existing ~/artifacts/*/*
