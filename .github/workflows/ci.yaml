# Trigger del workflow: si attiva ad ogni push e pull request
on:
  push: {} # Si attiva su push a qualsiasi branch
  pull_request: {} # Si attiva su pull request verso qualsiasi branch

jobs:
  # Job per costruire le wheel su Windows
  windows-build:
    name: Build Windows (x64) Python ${{ matrix.PYVERSION }}
    runs-on: windows-latest
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      CI_ARCH: "64" 
      CI_WINDOWS: "1"
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }} (x64)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          architecture: 'x64'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        # Questo script prepara la directory 'synthizer-vendored' con il codice C/C++
        # Assicurati che il percorso 'synthizer-c/vendor.py' sia corretto.
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (Windows)
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ env.CI_ARCH }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ env.CI_ARCH }}-

      - name: Configure MSVC 64-bit Environment Variables
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          echo "Configured MSVC for x64"
          set PATH >> %GITHUB_ENV%
          set INCLUDE >> %GITHUB_ENV%
          set LIB >> %GITHUB_ENV%

      - name: Install build dependencies (Windows)
        run: |
          python -m pip install --upgrade pip 
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython

      - name: Build Python Wheels (Windows)
        shell: powershell
        run: |
          Set-Location $Env:GITHUB_WORKSPACE
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-win-x64-${{ matrix.PYVERSION }}
          path: dist/*.whl

  # Job per costruire le wheel su Linux
  linux-build:
    name: Build Linux (x64) Python ${{ matrix.PYVERSION }}
    runs-on: ubuntu-latest
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      CI_ARCH: "64" 
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (Linux)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYVERSION }}-

      - name: Install system build dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential 

      - name: Install Python build dependencies (Linux)
        run: |
          python -m pip install --upgrade pip 
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython

      - name: Build Python Wheels (Linux)
        run: |
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-linux-x64-${{ matrix.PYVERSION }}
          path: dist/*.whl

  # Job per costruire le wheel su macOS
  macos-build:
    name: Build macOS (${{ matrix.ARCH }}) Python ${{ matrix.PYVERSION }} 
    runs-on: macos-latest # Questo runner Ã¨ macos-14-arm64
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      TARGET_ARCH: ${{ matrix.ARCH }} 
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        ARCH: ["arm64", "x64"] 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install and set up gettext for x64 Python
        # Applica per Python 3.8, 3.9, e 3.10 su x64, che sono le versioni problematiche
        if: matrix.ARCH == 'x64' && (matrix.PYVERSION == '3.8' || matrix.PYVERSION == '3.9' || matrix.PYVERSION == '3.10')
        shell: bash -e {0} # Use bash and exit on error
        run: |
          echo "Attempting to install/reinstall x64 gettext for x64 Python environment on ARM64 runner..."
          # Ensure PATH includes Homebrew's x64 path first for subsequent brew commands if needed,
          # though arch -x86_64 should handle this.
          # if [ -d "/usr/local/bin" ]; then export PATH="/usr/local/bin:$PATH"; fi
          
          echo "Updating Homebrew for x86_64..."
          arch -x86_64 brew update
          
          echo "Reinstalling/Installing gettext for x86_64..."
          arch -x86_64 brew reinstall gettext || arch -x86_64 brew install gettext
          
          echo "Forcing link for gettext for x86_64..."
          arch -x86_64 brew link --force gettext
          
          GETTEXT_X64_PREFIX_CMD="arch -x86_64 brew --prefix gettext"
          echo "Running: ${GETTEXT_X64_PREFIX_CMD}"
          GETTEXT_X64_PREFIX=$($GETTEXT_X64_PREFIX_CMD)
          echo "Detected x64 gettext prefix: ${GETTEXT_X64_PREFIX}"
          
          if [ -n "${GETTEXT_X64_PREFIX}" ] && [ -d "${GETTEXT_X64_PREFIX}/lib" ]; then
            GETTEXT_LIB_DIR="${GETTEXT_X64_PREFIX}/lib"
            GETTEXT_BIN_DIR="${GETTEXT_X64_PREFIX}/bin"
            echo "Found gettext lib for x64 at ${GETTEXT_LIB_DIR}"
            
            echo "Setting DYLD_LIBRARY_PATH to include ${GETTEXT_LIB_DIR}"
            echo "DYLD_LIBRARY_PATH=${GETTEXT_LIB_DIR}${DYLD_LIBRARY_PATH:+:$DYLD_LIBRARY_PATH}" >> $GITHUB_ENV
            
            echo "Setting DYLD_FALLBACK_LIBRARY_PATH to include ${GETTEXT_LIB_DIR}" # Added fallback
            echo "DYLD_FALLBACK_LIBRARY_PATH=${GETTEXT_LIB_DIR}${DYLD_FALLBACK_LIBRARY_PATH:+:$DYLD_FALLBACK_LIBRARY_PATH}" >> $GITHUB_ENV

            echo "Adding ${GETTEXT_BIN_DIR} to GITHUB_PATH"
            echo "${GETTEXT_BIN_DIR}" >> $GITHUB_PATH
            
            echo "Verifying libintl.8.dylib exists at ${GETTEXT_LIB_DIR}/libintl.8.dylib:"
            ls -l "${GETTEXT_LIB_DIR}/libintl.8.dylib" || (echo "libintl.8.dylib NOT FOUND at ${GETTEXT_LIB_DIR} after install!" && exit 1)
            
            echo "DYLD_LIBRARY_PATH will be set to include: ${GETTEXT_LIB_DIR}"
            echo "DYLD_FALLBACK_LIBRARY_PATH will be set to include: ${GETTEXT_LIB_DIR}"
            echo "PATH will be set to include: ${GETTEXT_BIN_DIR}"
          else
            echo "Error: gettext x64 prefix or its lib directory not found after attempting brew (re)install and link."
            echo "Detected prefix was: '${GETTEXT_X64_PREFIX}'"
            echo "Listing files in /usr/local/opt/gettext/lib if it exists:"
            ls -lR "/usr/local/opt/gettext" || echo "/usr/local/opt/gettext not found or empty."
            exit 1 
          fi
          echo "--- End of gettext setup ---"

      - name: Set up Python ${{ matrix.PYVERSION }} (${{ matrix.ARCH }})
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          architecture: ${{ matrix.ARCH }} 

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (macOS ${{ matrix.ARCH }})
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ matrix.ARCH }}-${{ env.PYVERSION }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }} 
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.ARCH }}-${{ env.PYVERSION }}-

      - name: Install Python build dependencies (macOS)
        run: |
          python -m pip install --upgrade pip 
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython
          
      - name: Build Python Wheels (macOS ${{ matrix.ARCH }})
        run: |
          echo "Current DYLD_LIBRARY_PATH (at build time): $DYLD_LIBRARY_PATH" 
          echo "Current DYLD_FALLBACK_LIBRARY_PATH (at build time): $DYLD_FALLBACK_LIBRARY_PATH" 
          echo "Current PATH (at build time): $PATH" 
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (macOS ${{ matrix.ARCH }})
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-macos-${{ matrix.ARCH }}-${{ matrix.PYVERSION }} 
          path: dist/*.whl

  # Job per creare la sdist (source distribution)
  sdist-build:
    name: Build Python sdist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python (for sdist)
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' 
      
      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Install Python build dependencies (sdist)
        run: |
          python -m pip install --upgrade pip 
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython

      - name: Build Python sdist
        run: python setup.py sdist

      - name: Upload Python sdist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-sdist
          path: dist/*.tar.gz 

  # Job per il deployment su PyPI
  deploy_pypi:
    name: Deploy to PyPI
    if: startsWith(github.ref, 'refs/tags') 
    needs: [windows-build, linux-build, macos-build, sdist-build] 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write 
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ~/artifacts 

      - name: Set up Python for Twine
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' 
      
      - name: Upgrade pip for Twine step 
        run: python -m pip install --upgrade pip

      - name: Install Twine
        run: python -m pip install --upgrade twine

      - name: Display downloaded artifacts structure
        run: ls -R ~/artifacts

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }} 
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }} 
        run: |
          python -m twine upload --skip-existing ~/artifacts/*/*
