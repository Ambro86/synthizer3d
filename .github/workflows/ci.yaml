# Trigger del workflow: si attiva ad ogni push e pull request
on:
  push: {} # Si attiva su push a qualsiasi branch
  pull_request: {} # Si attiva su pull request verso qualsiasi branch

jobs:
  # Job per costruire le wheel su Windows
  windows-build:
    name: Build Windows (${{ matrix.CI_ARCH }}) Python ${{ matrix.PYVERSION }}
    runs-on: ${{ matrix.CI_ARCH == 'arm64' && 'windows-11-arm' || 'windows-latest' }}
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      CI_ARCH_LOWER: ${{ matrix.CI_ARCH == 'arm64' && 'arm64' || (matrix.CI_ARCH == 'x86' && 'x86' || 'x64') }} 
      CI_WINDOWS: "1"
      CI_ARCH_ENV: ${{ matrix.CI_ARCH }} 
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        CI_ARCH: ["x64", "x86", "arm64"] 
        exclude:
          # Python 3.8 for Windows ARM64 is not available via actions/setup-python
          - CI_ARCH: "arm64"
            PYVERSION: "3.8"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }} (${{ env.CI_ARCH_LOWER }})
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          architecture: ${{ env.CI_ARCH_LOWER }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (Windows ${{ matrix.CI_ARCH }})
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ matrix.CI_ARCH }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ matrix.CI_ARCH }}-

      - name: Configure MSVC Environment Variables (${{ matrix.CI_ARCH }})
        shell: cmd
        run: |
          echo "Configuring MSVC for target architecture: ${{ env.CI_ARCH_ENV }}"
          set VCVARS_ARG=amd64
          if "${{ env.CI_ARCH_ENV }}" == "x86" (
            set VCVARS_ARG=x86
          ) else if "${{ env.CI_ARCH_ENV }}" == "arm64" (
            set VCVARS_ARG=amd64_arm64
          )
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %VCVARS_ARG%
          echo "MSVC configured for %VCVARS_ARG%"
          set PATH >> %GITHUB_ENV%
          set INCLUDE >> %GITHUB_ENV%
          set LIB >> %GITHUB_ENV%

      - name: Install build dependencies (Windows)
        run: |
          python -m pip install --upgrade pip 
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython

      - name: Build Python Wheels (Windows ${{ matrix.CI_ARCH }})
        # Per Windows ARM64, disabilita NEON in dr_mp3 per evitare errori di compilazione
        # se __ARM_NEON__ non Ã¨ rilevato correttamente dal compilatore MSVC ARM64.
        env:
          CMAKE_ARGS: ${{ matrix.CI_ARCH == 'arm64' && '-DDR_MP3_NO_NEON=1' || '' }}
        shell: powershell
        run: |
          Write-Host "CMAKE_ARGS for this build: $Env:CMAKE_ARGS"
          Set-Location $Env:GITHUB_WORKSPACE
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (Windows ${{ matrix.CI_ARCH }})
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-win-${{ matrix.CI_ARCH }}-${{ matrix.PYVERSION }}
          path: dist/*.whl

  # Job per costruire le wheel su Linux
  linux-build:
    name: Build Linux (x64) Python ${{ matrix.PYVERSION }}
    runs-on: ubuntu-latest 
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      CI_ARCH: "x64" 
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (Linux)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYVERSION }}-

      - name: Install system build dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential 

      - name: Install Python build dependencies (Linux)
        run: |
          python -m pip install --upgrade pip 
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython

      - name: Build Python Wheels (Linux)
        run: |
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-linux-x64-${{ matrix.PYVERSION }}
          path: dist/*.whl
          
  # Job per costruire le wheel su macOS (x64 - Intel Runner)
  macos-x64-build:
    name: Build macOS (x64) Python ${{ matrix.PYVERSION }} 
    runs-on: macos-13 
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      TARGET_ARCH: "x64" 
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }} (x64)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          architecture: 'x64' 

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (macOS x64)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-x64-pip-${{ env.PYVERSION }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }} 
          restore-keys: |
            ${{ runner.os }}-x64-pip-${{ env.PYVERSION }}-

      - name: Install Python build dependencies (macOS)
        run: |
          python -m pip install --upgrade pip 
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython
          
      - name: Build Python Wheels (macOS x64)
        run: |
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (macOS x64)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-macos-x64-${{ matrix.PYVERSION }} 
          path: dist/*.whl
          
  # Job per costruire le wheel su macOS (ARM64 - ARM Runner)
  macos-arm64-build:
    name: Build macOS (arm64) Python ${{ matrix.PYVERSION }} 
    runs-on: macos-latest 
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      TARGET_ARCH: "arm64" 
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }} (arm64)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          architecture: 'arm64' 

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (macOS arm64)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-arm64-pip-${{ env.PYVERSION }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }} 
          restore-keys: |
            ${{ runner.os }}-arm64-pip-${{ env.PYVERSION }}-

      - name: Install Python build dependencies (macOS)
        run: |
          python -m pip install --upgrade pip 
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython
          
      - name: Build Python Wheels (macOS arm64)
        run: |
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (macOS arm64)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-macos-arm64-${{ matrix.PYVERSION }} 
          path: dist/*.whl

  # Job per creare la sdist (source distribution)
  sdist-build:
    name: Build Python sdist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python (for sdist)
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' 
      
      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Install Python build dependencies (sdist)
        run: |
          python -m pip install --upgrade pip 
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython

      - name: Build Python sdist
        run: python setup.py sdist

      - name: Upload Python sdist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-sdist
          path: dist/*.tar.gz 

  # Job per il deployment su PyPI
  deploy_pypi:
    name: Deploy to PyPI
    if: startsWith(github.ref, 'refs/tags') 
    needs: [windows-build, linux-build, macos-x64-build, macos-arm64-build, sdist-build] 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write 
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ~/artifacts 

      - name: Set up Python for Twine
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' 
      
      - name: Upgrade pip for Twine step 
        run: python -m pip install --upgrade pip

      - name: Install Twine
        run: python -m pip install --upgrade twine

      - name: Display downloaded artifacts structure
        run: ls -R ~/artifacts

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }} 
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }} 
        run: |
          python -m twine upload --skip-existing ~/artifacts/*/*
