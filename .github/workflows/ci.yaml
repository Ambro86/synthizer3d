# Trigger del workflow: si attiva ad ogni push e pull request
on:
  push: {} # Si attiva su push a qualsiasi branch
  pull_request: {} # Si attiva su pull request verso qualsiasi branch

jobs:
  # Job per costruire le wheel su Windows
  windows-build: # Rinominato da 'windows' per coerenza
    name: Build Windows (x64) Python ${{ matrix.PYVERSION }}
    runs-on: windows-latest
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      CI_ARCH: "64" 
      CI_WINDOWS: "1"
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }} (x64)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          architecture: 'x64'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        # Questo script prepara la directory 'synthizer-vendored' con il codice C/C++
        # Assicurati che il percorso 'synthizer-c/vendor.py' sia corretto.
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (Windows)
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ env.CI_ARCH }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ env.CI_ARCH }}-

      - name: Configure MSVC 64-bit Environment Variables
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          echo "Configured MSVC for x64"
          set PATH >> %GITHUB_ENV%
          set INCLUDE >> %GITHUB_ENV%
          set LIB >> %GITHUB_ENV%

      - name: Install build dependencies (Windows)
        run: |
          python -m pip install --upgrade pip # Questo è ridondante ora, ma innocuo
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython

      - name: Build Python Wheels (Windows)
        # Se hai uno script ./ci/build_python.ps1, usalo.
        # Altrimenti, il comando standard è 'python setup.py bdist_wheel'.
        shell: powershell
        run: |
          Set-Location $Env:GITHUB_WORKSPACE
          # Esempio se hai uno script specifico:
          # ./ci/build_python.ps1
          # Altrimenti, comando standard:
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-win-x64-${{ matrix.PYVERSION }}
          path: dist/*.whl

  # Job per costruire le wheel su Linux
  linux-build:
    name: Build Linux (x64) Python ${{ matrix.PYVERSION }}
    runs-on: ubuntu-latest
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      CI_ARCH: "64" # Per coerenza, anche se non usato direttamente come in Windows
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          # architecture: 'x64' # Di default per ubuntu-latest

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (Linux)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYVERSION }}-

      - name: Install system build dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential # Per compilatori C/C++ e make
          # Aggiungi qui altri pacchetti se necessari (es. per dipendenze C di Synthizer)

      - name: Install Python build dependencies (Linux)
        run: |
          python -m pip install --upgrade pip # Ridondante ma innocuo
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython

      - name: Build Python Wheels (Linux)
        # Per many_linux wheels, sarebbe necessario un setup più complesso con Docker.
        # Questo crea una wheel per la glibc del runner.
        run: |
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-linux-x64-${{ matrix.PYVERSION }}
          path: dist/*.whl

  # Job per costruire le wheel su macOS
  macos-build:
    name: Build macOS (x64) Python ${{ matrix.PYVERSION }}
    runs-on: macos-latest # Attualmente Intel (x64)
    env:
      PYVERSION: ${{ matrix.PYVERSION }}
      CI_ARCH: "64" # Per coerenza
    strategy:
      fail-fast: false
      matrix:
        PYVERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.PYVERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYVERSION }}
          # architecture: 'x64' # Di default per macos-latest x64

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Cache Pip (macOS)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ env.PYVERSION }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYVERSION }}-

      - name: Install Python build dependencies (macOS)
        run: |
          python -m pip install --upgrade pip # Ridondante ma innocuo
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython

      - name: Build Python Wheels (macOS)
        run: |
          python setup.py bdist_wheel

      - name: Upload Python Wheel Artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-macos-x64-${{ matrix.PYVERSION }}
          path: dist/*.whl

  # Job per creare la sdist (source distribution)
  sdist-build:
    name: Build Python sdist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python (for sdist)
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Una versione stabile per la sdist
      
      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Run C/C++ code vendoring script
        run: python synthizer-c/vendor.py synthizer-vendored

      - name: Install Python build dependencies (sdist)
        run: |
          python -m pip install --upgrade pip # Ridondante ma innocuo
          pip install ninja cmake wheel tomli setuptools packaging distro scikit-build cython

      - name: Build Python sdist
        run: python setup.py sdist

      - name: Upload Python sdist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-sdist
          path: dist/*.tar.gz 

  # Job per il deployment su PyPI
  deploy_pypi:
    name: Deploy to PyPI
    if: startsWith(github.ref, 'refs/tags') # Esegue solo quando viene creato un tag
    needs: [windows-build, linux-build, macos-build, sdist-build] # Dipende da tutte le build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Per Trusted Publishing su PyPI
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ~/artifacts 

      - name: Set up Python for Twine
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' 
      
      - name: Upgrade pip for Twine step # Aggiunto anche qui per consistenza
        run: python -m pip install --upgrade pip

      - name: Install Twine
        run: python -m pip install --upgrade twine

      - name: Display downloaded artifacts structure
        run: ls -R ~/artifacts

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }} # Di solito '__token__'
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }} # Il tuo token API da GitHub Secrets
        run: |
          python -m twine upload --skip-existing ~/artifacts/*/*
